# Sample setup.cfg file for building a python project using setuptools.
# Adapted from setup.py used in PyPA's sample project:
# https://github.com/pypa/sampleproject
#
# Further documentation can be found at:
# https://setuptools.readthedocs.io/en/latest/setuptools.html#configuring-setup-using-setup-cfg-files

# Arguments marked as "Required" below must be included for upload to PyPI.
# Fields marked as "Optional" may be commented out.

[metadata]
# This is the name of your project. The first time you publish this
# package, this name will be registered for you. It will determine how
# users can install this project, e.g.:
#
# $ pip install sampleproject
#
# And where it will live on PyPI: https://pypi.org/project/sampleproject/
#
# There are some restrictions on what makes a valid project name
# specification here:
# https://packaging.python.org/specifications/core-metadata/#name

## Required
name = sampleproject

# Versions should comply with PEP 440:
# https://www.python.org/dev/peps/pep-0440/
#
# For a discussion on single-sourcing the version across setup.py and the
# project code, see
# https://packaging.python.org/en/latest/single_source_version.html

## Required
version = 0.0.2

# This is a one-line description or tagline of what your project does. This
# corresponds to the "Summary" metadata field:
# https://packaging.python.org/specifications/core-metadata/#summary

## Optional
description = A sample python project using pyproject.toml

# This is an optional longer description of your project that represents
# the body of text which users will see when they visit PyPI.
#
# Often, this is the same as your README, so you can just read it in from
# that file directly (as we have already done above)
#
# This field corresponds to the "Description" metadata field:
# https://packaging.python.org/specifications/core-metadata/#description-optional

## Optional
long_description = file: README.md

# Denotes that our long_description is in Markdown; valid values are
# text/plain, text/x-rst, and text/markdown
#
# Optional if long_description is written in reStructuredText (rst) but
# required for plain-text or Markdown; if unspecified, "applications should
# attempt to render [the long_description] as text/x-rst; charset=UTF-8 and
# fall back to text/plain if it is not valid rst" (see link below)
#
# This field corresponds to the "Description-Content-Type" metadata field:
# https://packaging.python.org/specifications/core-metadata/#description-content-type-optional

## Optional
long_description_content_type = text/markdown

# This should be a valid link to your project's main homepage.
#
# This field corresponds to the "Home-Page" metadata field:
# https://packaging.python.org/specifications/core-metadata/#home-page-optional

## Optional
url = https://github.com/cmw278/python-template

# This should be your name or the name of the organization which owns the
# project.

## Optional
author = A. Random Developer

# This should be a valid email address corresponding to the author listed
# above.

## Optional
author_email = author@example.com

## Optional
keywords = sample, setuptools, development, pyproject.toml

## Optional
licence_files = LICENSE

# Classifiers help users find your project by categorizing it.
#
# For a list of valid classifiers, see https://pypi.org/classifiers/

## Optional
classifiers =
  # How mature is this project? Common values are
  #   3 - Alpha
  #   4 - Beta
  #   5 - Production/Stable
  Development Status :: 1 - Planning

  # Indicate who your project is intended for
  Intended Audience :: Developers
  Topic :: Software Development :: Build Tools
  
  # Pick your license as you wish
  License :: The Unlicense

  # Specify the Python versions you support here. In particular, ensure
  # that you indicate you support Python 3. These classifiers are *not*
  # checked by 'pip install'. See instead 'python_requires' below.
  Programming Language :: Python :: 3
  Programming Language :: Python :: 3.5
  Programming Language :: Python :: 3.6
  Programming Language :: Python :: 3.7
  Programming Language :: Python :: 3.8
  Programming Language :: Python :: 3 :: Only


[options]
# When your source code is in a subdirectory under the project root, e.g.
# `src/`, it is necessary to specify the `package_dir` argument.

## Optional
package_dir =
  = src

# You can just specify package directories manually here if your project is
# simple. Or you can use find_packages().

## Optional
packages = find:

# You can just specify package directories manually here if your project is
# simple. Or you can use find_packages().
#
# Alternatively, if you just want to distribute a single Python file, use
# the `py_modules` argument instead as follows, which will expect a file
# called `my_module.py` to exist:
#
#   py_modules = [ my_module ]
#

# This section defines the arguments that will be provided to find_packages().
# Argument `where` is required when the packages are located anywhere other
# than the root directory.

## Optional
[options.packages.find]
where = src

# To provide executable scripts, use entry points in preference to the
# "scripts" keyword. Entry points provide cross-platform support and allow
# `pip` to create the appropriate form of executable for the target
# platform.
#
# For example, the following would provide a command called `example-add` which
# executes the function `main` from this package when invoked:

## Optional
[options.entry_points]
console_scripts =
  example-add = example:main